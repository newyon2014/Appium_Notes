
Step1: Install homebrew [package manager for macOS and is used to install software packages]
======================================================================================
Link: https://brew.sh/
Command: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

Step2: Install node and npm [Appium dependencies]
===============================================
Commands to check if node and npm are installed:
node -v
npm -v
Command to install node: brew install node [This will install npm as well]
Command to check node installation path: where node or which node

Step3: Install Appium server using NPM (Appium CLI)
===================================================
Command to install Appium: npm install â€“g appium
Command to check Appium version: appium -v
Command to check Appium installation path: where appium or which Appium

Step4: Install Appium server using Appium Desktop client
=======================================================
Download link: https://appium.io

Step5: Install Xcode
====================
Configure Apple ID in Account preferences
Install from App Store

Step6: Install Xcode command line tools
======================================
Command: xcode-select --install

Step7: Install xcpretty [to make Xcode output reasonable]
========================================================
Command to install xcpretty: gem install xcpretty

Step8: Install Carthage [dependency manager, required for WebDriverAgent]
==================================================================
Command to install Carthage: brew install Carthage

Step9: Install Appium-doctor and check Appium setup
===================================================
Command to install Appium doctor: npm install -g appium-doctor
Command to get help: appium-doctor --h
Command to check setup for iOS: appium-doctor --ios

Step10: Build UIKitCatalog app for simulator
===========================================
Download link: https://github.com/appium/ios-uicatalog
Command to get simulator name: xcodebuild -showsdks
Command to build app for the simulator: xcodebuild -sdk <simulator_name>
Command to build UIKitCatalog app for simulator: npm install

Step11:Start session with UIKitCatalog app using Appium Desktop/Appium CLI
=========================================================================
Command to get UDID: instruments -s devices


=================================================================
                       Real device setup
=================================================================

Getting UDID
=============
Command to install ios-deploy: npm install -g ios-deploy
Command to get UDID: ios-deploy -c
OR
Command to get UDID: instruments -s devices


1. Code signing WebDriverAgent: Basic (automatic/manual) configuration.
======================================================================

Step 1. Enroll for Developer program
- Create Apple account: https://developer.apple.com
- Enable two factor authentication: https://appleid.apple.com/account/manage
- Click Join the Apple Developer program
- Click Enroll
- Click Start Your Enrollment

Step 2. Register device UDID on the developer portal (this can be done from Xcode as well)

Step 3. Add your Apple ID (paid developer account) to XCode and download the certificate (if required, create new certificate on the developer portal)

Step 4. Generate UIKitCatalog IPA:
- Download UIKitCatalog app from https://github.com/appium/ios-uicatalog
- Launch project and code sign using Xcode managed provisioning profile
- Confirm wild card provisioning profile is created in the developer account
- (select generic iOS device) Archive app to generate IPA

Step 5. Create session with app using Appium Desktop server as well as CLI server
- Launch Appium Desktop, open inspector session, Set desired capabilities
"xcodeOrgId": "your team id"
"xcodeSigningId": "iPhone Developer"
- Launch Appium Desktop, open inspector session, point to CLI server, Set desired capabilities
"xcodeOrgId": "your team id"
"xcodeSigningId": "iPhone Developer"

2. Code signing WebDriverAgent: Full manual configuration path
==============================================================
Step 1. Add your Apple ID to XCode and download the certificate

Step 2. Find WebDriverAgent project
We will use Appium CLI version for test execution and point Appium Desktop to use CLI server for inspecting the app.
In terminal, execute command:
    $ where appium or which Appium
    /path/where/installed/bin/appium
WebDriverAgent project path:
Appium CLI:/path/where/installed/lib/node_modules/appium/node_modules/appium-webdriveragent
Appium Desktop: /Applications/Appium.app/Contents/Resources/app/node_modules/appium/node_modules/appium-webdriveragent

Step 3. Navigate to WebDriverAgent project path in terminal and run below command to setup the project

mkdir -p Resources/WebDriverAgent.bundle
    ./Scripts/bootstrap.sh -d

Step 4. Open WebDriverAgent.xcodeproj in Xcode. For both the WebDriverAgentLib and WebDriverAgentRunner targets, select "Automatically manage signing" in the "General" tab, and then select your Development Team. This should also auto select Signing Certificate. 

Step 5. Manually change the bundle id for the target by going into the "Build Settings" tab, and changing the "Product Bundle Identifier" from com.facebook.WebDriverAgentRunner to 
something that Xcode will accept (something really unique!)

Step 6. Command to build the project:
xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=<udid>' test -allowProvisioningUpdates

Step 7. Create session with app using Appium Inspector pointing to CLI server